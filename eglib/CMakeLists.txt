include(TestBigEndian)

# Package info
set(PACKAGE_NAME eglib)
set(PACKAGE "${PACKAGE_NAME}")
set(PACKAGE_VERSION 0.3)
set(PACKAGE_BUGREPORT "http://bugzilla.xamarin.com/enter_bug.cgi?classification=Mono")
set(PACKAGE_STRING "${PACKAGE_NAME} ${PACKAGE_VERSION}")
set(PACKAGE_TARNAME "${PACKAGE_NAME}")
set(PACKAGE_URL "")

set(GNUC_PRETTY "")
set(GNUC_UNUSED "")
set(BREAKPOINT "G_STMT_START { raise (SIGTRAP); } G_STMT_END")
if(CMAKE_C_COMPILER_ID MATCHES "Clang|GNU")
  set(GNUC_UNUSED "__attribute__((__unused__))")
  set(GNUC_NORETURN "__attribute__((__noreturn__))")
  if(HOST_X86 OR HOST_X86_64)
    set(BREAKPOINT "G_STMT_START { __asm__ (\"int \$03\"); } G_STMT_END")
  endif()
endif()

if(CPPFLAGS_FOR_EGLIB)
  set(CPPFLAGS ${CPPFLAGS_FOR_EGLIB})
endif()
if(CFLAGS_FOR_EGLIB)
  set(CFLAGS ${CFLAGS_FOR_EGLIB})
endif()

set(CFLAGS "${CFLAGS} -g -D_GNU_SOURCE")

test_big_endian(BIG_ENDIAN)
if(BIG_ENDIAN)
  set(ORDER "G_BIG_ENDIAN")
else()
  set(ORDER "G_LITTLE_ENDIAN")
endif()

set(PLATFORM_DARWIN ${HOST_DARWIN})

if(HOST_WIN32)
  set(PATHSEP "\\")
  set(SEARCHSEP ";")
  set(OS "WIN32")
  set(PIDTYPE "void *")
else()
  set(PATHSEP "/")
  set(SEARCHSEP ":")
  set(OS "UNIX")
  set(PIDTYPE "int")
endif()

if(HOST_SOLARIS)
  set(CFLAGS "${CFLAGS} -D_POSIX_PTHREAD_SEMANTICS")
endif()

check_types_size_ext("void*" "int" "long" "long long")
message(STATUS "sizeof(void*) = ${SIZEOF_VOID_P}")
message(STATUS "sizeof(int) = ${SIZEOF_INT}")
message(STATUS "sizeof(long) = ${SIZEOF_LONG}")
message(STATUS "sizeof(long long) = ${SIZEOF_LONG_LONG}")

check_functions_exists_ext(strlcpy stpcpy strtok_r rewinddir vasprintf)
check_functions_exists_ext(getrlimit)
check_functions_exists_ext(fork execv execve)

if(NOT HAVE_VASPRINTF)
  set(NEED_VASPRINTF YES)
endif()

# Mono currently supports 10.6, but strndup is not available prior to 10.7; avoiding
# the detection of strndup on OS X so Mono built on 10.7+ still runs on 10.6. This can be
# removed once support for 10.6 is dropped.
if(TARGET_OSX)
  check_functions_exists_ext(getpwuid_r)
elseif(NOT TARGET_IOS)
  check_functions_exists_ext(strndup getpwuid_r)
endif()

search_libraries_for_function(sqrtf SQRTF_LIB m)
set(LIBS ${LIBS} ${SQRTF_LIB})

# nanosleep may not be part of libc, also search it in other libraries
search_libraries_for_function(nanosleep NANOSLEEP_LIB rt)
if(DEFINED NANOSLEEP_LIB AND NOT NANOSLEEP_LIB STREQUAL "")
  message(STATUS "nanosleep() found in '${NANOSLEEP_LIB}'")
  set(LIBS ${LIBS} ${NANOSLEEP_LIB})
endif()

search_libraries_for_function(dlopen DLOPEN_LIB dl)
if(DEFINED DLOPEN_LIB AND NOT DLOPEN_LIB STREQUAL "")
  set(LIBS ${LIBS} ${DLOPEN_LIB})
endif()

check_c_source_compiles("\
    int foo (int i, int j);\
    #define bar(...) foo (1, __VA_ARGS__)\
    void main () {\
        bar (2);\
    }\
  " HAVE_ISO_VARARGS)
if(HAVE_ISO_VARARGS)
  set(G_HAVE_ISO_VARARGS 1)
else()
  set(G_HAVE_ISO_VARARGS 0)
endif()

check_include_files_ext(getopt.h sys/select.h sys/time.h sys/wait.h pwd.h langinfo.h iconv.h localcharset.h sys/types.h sys/resource.h)
check_include_files_ext(alloca.h)
if(HAVE_ALLOCA_H)
  set(HAVE_ALLOCA_H 1)
else()
  set(HAVE_ALLOCA_H 0)
endif()

if(SIZEOF_VOID_P EQUAL SIZEOF_INT)
  set(GPOINTER_TO_INT "((gint) (ptr))")
  set(GPOINTER_TO_UINT "((guint) (ptr))")
  set(GINT_TO_POINTER "((gpointer) (v))")
  set(GUINT_TO_POINTER "((gpointer) (v))")
  set(GSIZE "int")
  set(GSIZE_FORMAT "\"u\"")
  set(G_GUINT64_FORMAT "\"llu\"")
  set(G_GINT64_FORMAT "\"lld\"")
  set(G_GUINT32_FORMAT "\"lu\"")
  set(G_GINT32_FORMAT "\"ld\"")
elseif(SIZEOF_VOID_P EQUAL SIZEOF_LONG)
  set(GPOINTER_TO_INT "((gint)(long) (ptr))")
  set(GPOINTER_TO_UINT "((guint)(long) (ptr))")
  set(GINT_TO_POINTER "((gpointer)(glong) (v))")
  set(GUINT_TO_POINTER "((gpointer)(gulong) (v))")
  set(GSIZE "long")
  set(GSIZE_FORMAT "\"lu\"")
  set(G_GUINT64_FORMAT "\"lu\"")
  set(G_GINT64_FORMAT "\"ld\"")
  set(G_GUINT32_FORMAT "\"u\"")
  set(G_GINT32_FORMAT "\"d\"")
elseif(SIZEOF_VOID_P EQUAL SIZEOF_LONG_LONG)
  set(GPOINTER_TO_INT "((gint)(long long) (ptr))")
  set(GPOINTER_TO_UINT "((guint)(unsigned long long) (ptr))")
  set(GINT_TO_POINTER "((gpointer)(long long) (v))")
  set(GUINT_TO_POINTER "((gpointer)(unsigned long long) (v))")
  set(GSIZE "long long")
  set(GSIZE_FORMAT "\"I64u\"")
  set(G_GUINT64_FORMAT "\"I64u\"")
  set(G_GINT64_FORMAT "\"I64i\"")
  set(G_GUINT32_FORMAT "\"I32u\"")
  set(G_GINT32_FORMAT "\"I32i\"")
else()
  message(FATAL_ERROR "unsupported pointer size")
endif()

configure_file(${CMAKE_CURRENT_SOURCE_DIR}/config-cmake.h.in ${CMAKE_CURRENT_BINARY_DIR}/config.h)

include_directories(${CMAKE_CURRENT_BINARY_DIR})

if(HOST_WIN32)
  add_subdirectory(src)
else()
  if(PLATFORM_DARWIN)
    add_subdirectory(src)
  else()
    if(CROSS_COMPILING)
      add_subdirectory(src)
    else()
      add_subdirectory(src)
      add_subdirectory(test)
    endif()
  endif()
endif()
