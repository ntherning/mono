include(ToNativePath)

function(find_mono_tool NAME ENV_VAR RESULT_VARIABLE)
  # Prefer the environment variable
  if(NOT $ENV{${ENV_VAR}} STREQUAL "")
    get_filename_component(X_PATH $ENV{${ENV_VAR}} PROGRAM PROGRAM_ARGS FLAGS)
    if(NOT EXISTS ${X_PATH})
      message(FATAL_ERROR "Could not find Mono ${NAME} path in environment variable ${ENV_VAR}")
    endif()
  else()
    if(NOT $ENV{MONO_HOME} STREQUAL "")
      set(CANDIDATE_PATHS $ENV{MONO_HOME}/bin)
    endif()
    if(WIN32)
      set(EXT .bat)
      set(CANDIDATE_PATHS ${CANDIDATE_PATHS} "C:/Program Files (x86)/Mono/bin")
    elseif(CYGWIN)
      set(EXT .bat)
      set(CANDIDATE_PATHS ${CANDIDATE_PATHS} "/cygdrive/c/Program Files (x86)/Mono/bin")
    endif()
    find_program(X_PATH NAMES ${NAME}${EXT} PATHS ${CANDIDATE_PATHS})
    if(NOT EXISTS ${X_PATH})
      message(FATAL_ERROR "Mono ${NAME} could not be located")
    endif()
  endif()
  set("${RESULT_VARIABLE}" ${X_PATH} PARENT_SCOPE)
  unset(X_PATH CACHE)
endfunction()

if(NOT MCS_PATH)
  find_mono_tool(mcs MCS_PATH MCS_PATH)
  set(MCS_PATH "${MCS_PATH}" CACHE FILEPATH "Mono C# compiler path")
endif()

if(NOT ILASM_PATH)
  find_mono_tool(ilasm ILASM_PATH ILASM_PATH)
  set(ILASM_PATH "${ILASM_PATH}" CACHE FILEPATH "Mono IL assembler path")
endif()

if(NOT MCS_PATH_WORKS)
  message(STATUS "Check for working Mono C# compiler: ${MCS_PATH}")
  file(WRITE ${CMAKE_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/CMakeTmp/TestCSharpCompiler.cs "public class Foo {Â public static int Main (string[] args) { return 0; } }")
  to_native_path(${CMAKE_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/CMakeTmp/TestCSharpCompiler.cs TEST_CSHARP_COMPILER_CS)
  to_native_path(${CMAKE_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/CMakeTmp/TestCSharpCompiler.exe TEST_CSHARP_COMPILER_EXE)
  execute_process(COMMAND ${MCS_PATH} -out:${TEST_CSHARP_COMPILER_EXE} ${TEST_CSHARP_COMPILER_CS} RESULT_VARIABLE MCS_PATH_EXITCODE ERROR_VARIABLE ERROR_IGNORED)
  if(MCS_PATH_EXITCODE EQUAL 0)
    set(MCS_PATH_WORKS YES)
    execute_process(COMMAND ${MCS_PATH} --version OUTPUT_VARIABLE MCS_PATH_VERSION OUTPUT_STRIP_TRAILING_WHITESPACE)
    string(REGEX REPLACE "Mono C# compiler version ([0-9.]+)" "\\1" MCS_PATH_VERSION "${MCS_PATH_VERSION}")
  endif()
  if(NOT MCS_PATH_WORKS)
    message(STATUS "Check for working Mono C# compiler: ${MCS_PATH} -- broken")
    message(FATAL_ERROR "The Mono C# compiler \"${MCS_PATH}\" is not able to compile a simple test program.")
  elseif(MCS_PATH_VERSION VERSION_LESS "4.0")
    message(STATUS "Check for working Mono C# compiler: ${MCS_PATH} -- unsupported version")
    message(FATAL_ERROR "Unsupported Mono C# compiler version ${MCS_PATH_VERSION}. Expected >= 4.0.")
  endif()

  message(STATUS "Check for working Mono C# compiler: ${MCS_PATH} -- works")
  set(MCS_PATH_WORKS YES CACHE INTERNAL "")
endif()

if(NOT ILASM_PATH_WORKS)
  message(STATUS "Check for working Mono IL assembler: ${ILASM_PATH}")
  execute_process(COMMAND ${ILASM_PATH} --about RESULT_VARIABLE ILASM_PATH_EXITCODE OUTPUT_VARIABLE OUTPUT_IGNORED ERROR_VARIABLE ERROR_IGNORED)
  if(NOT ILASM_PATH_EXITCODE EQUAL 0)
    message(STATUS "Check for working Mono IL assembler: ${ILASM_PATH} -- broken")
    message(FATAL_ERROR "ilasm command at ${ILASM_PATH} failed with exit code ${ILASM_PATH_EXITCODE}.")
  endif()
  message(STATUS "Check for working Mono IL assembler: ${ILASM_PATH} -- works")
  set(ILASM_PATH_WORKS YES CACHE INTERNAL "")
endif()

function(_cs_add_assembly FUNC TARGET TYPE)
  set(CURR_LIST)
  set(FLAGS)
  set(SOURCES)
  set(DEPENDS)
  set(LIBRARIES)
  foreach(ARG ${ARGN})
    if(ARG STREQUAL "FLAGS")
      set(CURR_LIST "FLAGS")
    elseif(ARG STREQUAL "SOURCES")
      set(CURR_LIST "SOURCES")
    elseif(ARG STREQUAL "DEPENDS")
      set(CURR_LIST "DEPENDS")
    elseif(ARG STREQUAL "LIBRARIES")
      set(CURR_LIST "LIBRARIES")
    elseif(ARG STREQUAL "FOLDER")
      set(CURR_LIST "FOLDER")
    else()
      if(NOT CURR_LIST)
        message(FATAL_ERROR "Error in ${FUNC}(...) arguments")
      endif()
      list(APPEND "${CURR_LIST}" ${ARG})
      if(ARG STREQUAL "FOLDER")
        # Only a single item is allowed in this list
        unset(CURR_LIST)
      endif()
    endif()
  endforeach()

  # Check whether the input files are .cs files or .il files. We don't support mixing.
  foreach(SOURCE ${SOURCES})
    if(SOURCE MATCHES "\\.(cs|CS)$")
      set(CS_SOURCES ${CS_SOURCES} ${SOURCE})
    elseif(SOURCE MATCHES "\\.(il|IL)$")
      set(IL_SOURCES ${IL_SOURCES} ${SOURCE})
    else()
      message(FATAL_ERROR "Cannot build assembly ${TARGET}.${TYPE}. Unrecognized file type for source ${SOURCE}.")
    endif()
  endforeach()

  if(CS_SOURCES AND IL_SOURCES)
    message(FATAL_ERROR "Cannot build assembly ${TARGET}.${TYPE}. Mixing .cs and .il files in the same assembly is not supported.")
  endif()
  if(IL_SOURCES AND LIBRARIES)
    message(FATAL_ERROR "Cannot build assembly ${TARGET}.${TYPE}. ilasm does not support linking against DLLs.")
  endif()

  set(TARGET_FILE "${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_CFG_INTDIR}/${TARGET}.${TYPE}")
  to_native_path(${TARGET_FILE} TARGET_FILE_NATIVE)
  set(OPTS -out:${TARGET_FILE_NATIVE} ${FLAGS})
  if("${TYPE}" MATCHES "dll")
    if(CS_SOURCES)
      set(OPTS ${OPTS} -target:library)
    else()
      set(OPTS ${OPTS} -dll)
    endif()
  endif()
  foreach(LIB ${LIBRARIES})
    if(TARGET ${LIB})
      get_target_property(LIB_FILE ${LIB} "TARGET_FILE")
      if(LIB_FILE)
        to_native_path(${LIB_FILE} LIB_FILE_NATIVE)
        set(OPTS ${OPTS} "-r:${LIB_FILE_NATIVE}")
        set(DEPENDS ${DEPENDS} ${LIB})
      else()
        set(OPTS ${OPTS} "-r:${LIB}")
      endif()
    else()
      set(OPTS ${OPTS} "-r:${LIB}")
    endif()
  endforeach()

  if(CS_SOURCES)
    add_custom_command(OUTPUT ${TARGET_FILE}
      COMMAND ${CMAKE_COMMAND} -E make_directory ${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_CFG_INTDIR}
      COMMAND ${MCS_PATH} ${OPTS} ${SOURCES}
      DEPENDS ${DEPENDS} ${SOURCES}
      WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
      COMMENT "Compiling assembly ${TARGET}.${TYPE}"
      VERBATIM)
  else()
    add_custom_command(OUTPUT ${TARGET_FILE}
      COMMAND ${CMAKE_COMMAND} -E make_directory ${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_CFG_INTDIR}
      COMMAND ${ILASM_PATH} ${OPTS} ${SOURCES}
      DEPENDS ${DEPENDS} ${SOURCES}
      WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
      COMMENT "Compiling assembly ${TARGET}.${TYPE}"
      VERBATIM)
  endif()
  add_custom_target(${TARGET} DEPENDS ${TARGET_FILE} SOURCES ${SOURCES})
  set_target_properties(${TARGET} PROPERTIES "TARGET_FILE" ${TARGET_FILE})
  if(FOLDER)
    set_target_properties(${TARGET} PROPERTIES FOLDER ${FOLDER})
  endif()
endfunction()

function(cs_add_executable TARGET)
  _cs_add_assembly("cs_add_executable" ${TARGET} exe ${ARGN})
endfunction()

function(cs_add_library TARGET)
  _cs_add_assembly("cs_add_library" ${TARGET} dll ${ARGN})
endfunction()
